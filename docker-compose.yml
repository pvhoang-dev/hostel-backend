version: '3.8'
services:
  
  # PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: php:8.3-fpm
    container_name: app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  # Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    platform: linux/arm64/v8
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./:/var/www
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - app-network

  # MySQL Service
  db:
    image: mariadb:latest
    container_name: db
    restart: unless-stopped
    tty: true
    platform: linux/arm64/v8
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: hostel
      MYSQL_ROOT_PASSWORD: root
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

  # Adminer Service (thay tháº¿ cho PHPMyAdmin)
  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    networks:
      - app-network

  # Laravel Scheduler Service
  scheduler:
    image: php:8.3-fpm
    container_name: scheduler
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    command: bash -c "while true; do php /var/www/artisan schedule:run; sleep 60; done"
    networks:
      - app-network
    depends_on:
      - app

  # Ngrok Service (cho webhook)
  ngrok:
    image: ngrok/ngrok:latest
    container_name: ngrok
    restart: unless-stopped
    ports:
      - "4040:4040"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTH_TOKEN}
    command: http webserver:80
    networks:
      - app-network
    depends_on:
      - webserver
# Docker Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  dbdata:
    driver: local
